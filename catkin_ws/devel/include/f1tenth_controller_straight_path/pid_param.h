// Generated by gencpp from file f1tenth_controller_straight_path/pid_param.msg
// DO NOT EDIT!


#ifndef F1TENTH_CONTROLLER_STRAIGHT_PATH_MESSAGE_PID_PARAM_H
#define F1TENTH_CONTROLLER_STRAIGHT_PATH_MESSAGE_PID_PARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace f1tenth_controller_straight_path
{
template <class ContainerAllocator>
struct pid_param_
{
  typedef pid_param_<ContainerAllocator> Type;

  pid_param_()
    : kp(0.0)
    , ki(0.0)
    , kd(0.0)
    , velocity(0.0)  {
    }
  pid_param_(const ContainerAllocator& _alloc)
    : kp(0.0)
    , ki(0.0)
    , kd(0.0)
    , velocity(0.0)  {
  (void)_alloc;
    }



   typedef float _kp_type;
  _kp_type kp;

   typedef float _ki_type;
  _ki_type ki;

   typedef float _kd_type;
  _kd_type kd;

   typedef float _velocity_type;
  _velocity_type velocity;




  typedef boost::shared_ptr< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> const> ConstPtr;

}; // struct pid_param_

typedef ::f1tenth_controller_straight_path::pid_param_<std::allocator<void> > pid_param;

typedef boost::shared_ptr< ::f1tenth_controller_straight_path::pid_param > pid_paramPtr;
typedef boost::shared_ptr< ::f1tenth_controller_straight_path::pid_param const> pid_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace f1tenth_controller_straight_path

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'f1tenth_controller_straight_path': ['/home/ubuntu/catkin_ws/src/catkin_src_packages/f1tenth_controller_straight_path/msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3f0c90d6d8520c586526621f9035ee3";
  }

  static const char* value(const ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3f0c90d6d8520c5ULL;
  static const uint64_t static_value2 = 0x86526621f9035ee3ULL;
};

template<class ContainerAllocator>
struct DataType< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1tenth_controller_straight_path/pid_param";
  }

  static const char* value(const ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 kp\n\
float32 ki\n\
float32 kd\n\
float32 velocity\n\
";
  }

  static const char* value(const ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kp);
      stream.next(m.ki);
      stream.next(m.kd);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::f1tenth_controller_straight_path::pid_param_<ContainerAllocator>& v)
  {
    s << indent << "kp: ";
    Printer<float>::stream(s, indent + "  ", v.kp);
    s << indent << "ki: ";
    Printer<float>::stream(s, indent + "  ", v.ki);
    s << indent << "kd: ";
    Printer<float>::stream(s, indent + "  ", v.kd);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // F1TENTH_CONTROLLER_STRAIGHT_PATH_MESSAGE_PID_PARAM_H
