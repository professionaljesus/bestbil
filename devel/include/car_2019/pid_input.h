// Generated by gencpp from file car_2019/pid_input.msg
// DO NOT EDIT!


#ifndef CAR_2019_MESSAGE_PID_INPUT_H
#define CAR_2019_MESSAGE_PID_INPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_2019
{
template <class ContainerAllocator>
struct pid_input_
{
  typedef pid_input_<ContainerAllocator> Type;

  pid_input_()
    : pid_vel(0.0)
    , pid_error(0.0)
    , pid_old_error(0.0)
    , D(0.0)  {
    }
  pid_input_(const ContainerAllocator& _alloc)
    : pid_vel(0.0)
    , pid_error(0.0)
    , pid_old_error(0.0)
    , D(0.0)  {
  (void)_alloc;
    }



   typedef float _pid_vel_type;
  _pid_vel_type pid_vel;

   typedef float _pid_error_type;
  _pid_error_type pid_error;

   typedef float _pid_old_error_type;
  _pid_old_error_type pid_old_error;

   typedef float _D_type;
  _D_type D;




  typedef boost::shared_ptr< ::car_2019::pid_input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_2019::pid_input_<ContainerAllocator> const> ConstPtr;

}; // struct pid_input_

typedef ::car_2019::pid_input_<std::allocator<void> > pid_input;

typedef boost::shared_ptr< ::car_2019::pid_input > pid_inputPtr;
typedef boost::shared_ptr< ::car_2019::pid_input const> pid_inputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_2019::pid_input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_2019::pid_input_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace car_2019

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'car_2019': ['/home/ubuntu/git/GroupC/src/catkin_src_packages/car_2019/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::car_2019::pid_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_2019::pid_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_2019::pid_input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_2019::pid_input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_2019::pid_input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_2019::pid_input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_2019::pid_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cff3f9f1385829155dff432cfff6c125";
  }

  static const char* value(const ::car_2019::pid_input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcff3f9f138582915ULL;
  static const uint64_t static_value2 = 0x5dff432cfff6c125ULL;
};

template<class ContainerAllocator>
struct DataType< ::car_2019::pid_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_2019/pid_input";
  }

  static const char* value(const ::car_2019::pid_input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_2019::pid_input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pid_vel\n\
float32 pid_error\n\
float32 pid_old_error\n\
float32 D\n\
";
  }

  static const char* value(const ::car_2019::pid_input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_2019::pid_input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pid_vel);
      stream.next(m.pid_error);
      stream.next(m.pid_old_error);
      stream.next(m.D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_2019::pid_input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_2019::pid_input_<ContainerAllocator>& v)
  {
    s << indent << "pid_vel: ";
    Printer<float>::stream(s, indent + "  ", v.pid_vel);
    s << indent << "pid_error: ";
    Printer<float>::stream(s, indent + "  ", v.pid_error);
    s << indent << "pid_old_error: ";
    Printer<float>::stream(s, indent + "  ", v.pid_old_error);
    s << indent << "D: ";
    Printer<float>::stream(s, indent + "  ", v.D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_2019_MESSAGE_PID_INPUT_H
